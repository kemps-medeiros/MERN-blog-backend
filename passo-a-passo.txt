hGIT REMOTE -V

Iniciar projeto node
 - npm init -y

 intalar express 
- npm i express

criar index.js e configurar o express 

criar pastas config / controllers / models / routes

criar banco de dados no mongodb

criar arquivo db.js dentro de CONFIG 
e configurar
ecportar o 'connect' e depois importar o 'connect' no arquivo index.js 

instalar o nodemon 

- npm install -D nodemon 

rodar com nodemon
nodemon index.js

configurar nodemon
"scripts": {
    "dev": "nodemon index.js"

    e depois rodar com npm run dev

Criar rota userRoutes dentro de routes

Criar userController na pasta controllers

instalar o pacote body-parser
    - npm i body-parser

configurar as rotas e testar no insomnia

instalar o express validator 

npm install --save express-validator

configurar o express-validator dentro do userController

Criar um arquivo Users dentro de Models, e configurar
um Schema para ele.

Depois voltar no userController para configurar a rota que vai cadastrar no banco de dados
Não esquecer de importar o Schema nesse arquivo

instalar os pacotes: 
jsonwebtoken - criar um token
bcrypt - criptografar a senha

continuar configurando a rota register , conigurando tambem o password e o token,
usando as bibliotecas instaladas

criar a API de login
login
loginValidations

criar a rota de login

===> CONFIGURAR O SETUP DO REACT
-na pasta do projeto digitar:
npx create-react-app client
(client vai ser a pasta que vai conter o react, a parte frontend de nossa aplicação)

-instalar o pacote concurrently,
digitar:
(digitar isso na pasta raiz do projeto: /mernblog) 
npm i concurrently
(isso é para executar vários comandos de forma simultanea, como npm run dev(para rodar node)
e outro para rodar react)

Atualizar o package.json da pasta raiz (backend) para:
    "server": "nodemon index.js",
    "client": "npm start --prefix client", (rodar frontend)
    "clientInstall": "npm install --prefix client", (instalar pacote na pasta client frontend)
    "dev": "concurrently \" npm run server \" \" npm run client \"" (rodar backend e frontend simultaneos)

- in em index.html do react dentro de client/public/

- deletar o que nao for usar na pasta src dentro de client
- criar pasta components em src 
- criar dentro de components:
=> Login.js
=> Register.js 
- criar uma pasta chamada auth dentro de components e incluir Login.js
e Register.js dentro dessa pasta

instalar os seguintes pacotes na pasta CLIENT:
lembrar de entrar na pasta CLIENT:
react-router / sass
npm i react-router-dom node-sass@4.14.1

entrar no google fonts
selecionar a fonte poppins selecionar os tamanhos
copiar link para importar essa fonte no projeto
colar o link no index.html logo em cima do </head>
No App.js ::
fazer importacao do browserrouter route e switch do react-router-dom
e configurar as rotas.
lembrar de colocar parenteses depois do return Exemplo:
return (
    <Router>
      <Switch>
        <Route path="/" />
      </Switch>
    </Router>
  );

  Criar componente home
  criar pasta SCSS dentro de SRC ,
  e dentro dessa pasta criar duas pastas abstracts / base / layout / utils / components
  criar um arquivo na pasta base, chamado _reset.scss

criar arquivo na pasta SRC chamado main.scss
configurar esse arquivo
importar (NAO ESQUECER) o arquivo main.scss no App.js / colocar isso em cima das importacoes
dos componentes


